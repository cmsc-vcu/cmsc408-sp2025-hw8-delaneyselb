---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-delaneyselb>


# Problem Background

This project explores the world_bank_data database, which contains a host of information regarding countries, regions, islands, etc. along with a range of information like income group, etc. In this assignment, I explore a host of queries, creating pivot tables and other figures.

```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
SELECT
  `Short Name`
FROM
  world_bank_data.wdi_country
WHERE
  region is NULL
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
DROP TABLE IF EXISTS wdi_country;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
CREATE TABLE wdi_country AS
SELECT * FROM world_bank_data.wdi_country
WHERE NOT region IS NULL;
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
SELECT COUNT(*) FROM wdi_country;
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
SELECT COUNT(region) FROM wdi_country;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
SELECT DISTINCT region
FROM wdi_country WHERE region IS NOT NULL
GROUP BY region
ORDER BY region;
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT region, COUNT(region) AS `Country Count`
FROM wdi_country WHERE region IS NOT NULL
GROUP BY region
ORDER BY `Country Count`;
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT `Long Name`, `Region`
FROM wdi_country
WHERE `Region` = 'North America'
ORDER BY `Long Name`;
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
SELECT `Region`, `Short Name`, `Long Name`
FROM wdi_country
WHERE `Short Name` = 'Qatar';
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT `Country Code`, `Short Name`, `2-alpha code`, `WB-2 code`, `Region`
FROM wdi_country
WHERE NOT `2-alpha code` = `WB-2 code`
ORDER BY `Short Name`;
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT `Income Group`, COUNT(*)
FROM wdi_country
GROUP BY `Income Group`
ORDER BY COUNT(*) DESC, `Income Group`
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
SELECT `Short Name`, region, `Income Group`
FROM wdi_country
WHERE `Income Group` is NULL AND `region` IS NOT NULL;
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
UPDATE wdi_country
SET `Income Group` = 'High income'
WHERE `Short Name` = 'CountryName';

COMMIT;
""")


```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
SELECT `Short Name`, `Income Group`
FROM wdi_country
WHERE `Short Name` = 'CountryName';
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT `Region`, `Income Group`, COUNT(*) 
FROM wdi_country
WHERE `Region` IS NOT NULL
  AND `Income Group` IS NOT NULL
GROUP BY `Region`, `Income Group`
ORDER BY `Region`,`Income Group`
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
SELECT 
    `Region`,
    SUM(CASE WHEN `Income Group` = 'Low income' THEN 1 ELSE 0 END) AS `Low Income`,
    SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN 1 ELSE 0 END) AS `Low Middle`,
    SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN 1 ELSE 0 END) AS `Upper Middle`,
    SUM(CASE WHEN `Income Group` = 'High income' THEN 1 ELSE 0 END) AS `High Income`,
    CAST(COUNT(*) AS DECIMAL(10,1)) AS `Row Total`
FROM wdi_country
WHERE `Region` IS NOT NULL
GROUP BY `Region`
ORDER BY `Region`;
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
SELECT 
    COUNT(*) AS `Low Income Countries`, 
    `Region`, 
    'Low income' AS `Income Group`
FROM wdi_country
WHERE `Income Group` = 'Low income'
GROUP BY `Region`
ORDER BY `Low Income Countries` DESC
LIMIT 1;
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
SELECT `Country Code`, `Short Name`, `Region`, `Income Group`
FROM wdi_country
WHERE `Region` = (
    SELECT `Region`
    FROM wdi_country
    WHERE `Country Code` = 'MHL'
) 
AND `Income Group` = (
    SELECT `Income Group`
    FROM wdi_country
    WHERE `Country Code` = 'MHL'
)
ORDER BY `Short Name`;
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
SELECT 
    regions.Region, 
    income_groups.`Income Group`, 
    0 AS `# Countries`
FROM 
    (SELECT DISTINCT Region FROM wdi_country WHERE Region IS NOT NULL) AS regions
CROSS JOIN 
    (SELECT DISTINCT `Income Group` FROM wdi_country WHERE `Income Group` IS NOT NULL) AS income_groups
LEFT JOIN 
    (SELECT Region, `Income Group`
     FROM wdi_country
     WHERE Region IS NOT NULL AND `Income Group` IS NOT NULL
     GROUP BY Region, `Income Group`) AS existing_combinations
ON regions.Region = existing_combinations.Region
AND income_groups.`Income Group` = existing_combinations.`Income Group`
WHERE existing_combinations.Region IS NULL
ORDER BY regions.Region, income_groups.`Income Group`;
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
WITH region_income AS (
    SELECT r.Region, ig.`Income Group`
    FROM (SELECT DISTINCT Region FROM wdi_country WHERE Region IS NOT NULL) AS r
    CROSS JOIN (SELECT DISTINCT `Income Group` FROM wdi_country WHERE `Income Group` IS NOT NULL) AS ig
),
country_counts AS (
    SELECT 
        Region, 
        `Income Group`, 
        COUNT(*) AS pair_cnt
    FROM wdi_country
    WHERE Region IS NOT NULL AND `Income Group` IS NOT NULL
    GROUP BY Region, `Income Group`
),
joined AS (
    SELECT 
        ri.Region, 
        ri.`Income Group`, 
        COALESCE(cc.pair_cnt, 0) AS pair_cnt
    FROM region_income ri
    LEFT JOIN country_counts cc
    ON ri.Region = cc.Region AND ri.`Income Group` = cc.`Income Group`
),
region_totals AS (
    SELECT 
        Region,
        SUM(pair_cnt) AS region_sum
    FROM joined
    GROUP BY Region
),
income_totals AS (
    SELECT 
        `Income Group`,
        SUM(pair_cnt) AS income_sum
    FROM joined
    GROUP BY `Income Group`
),
total AS (
    SELECT 
        217 AS total_sum
)
SELECT 
    j.Region,
    j.`Income Group`,
    j.pair_cnt,
    rt.region_sum,
    it.income_sum,
    tt.total_sum,
    ROUND((j.pair_cnt * 100.0) / tt.total_sum, 1) AS `Pct of Total`
FROM joined j
JOIN region_totals rt ON j.Region = rt.Region
JOIN income_totals it ON j.`Income Group` = it.`Income Group`
JOIN total tt
ORDER BY j.Region, j.`Income Group`;


""")

```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
WITH region_cte AS (
    SELECT region, COUNT(*) AS region_cnt 
    FROM wdi_country 
    WHERE region IS NOT NULL
    GROUP BY region
),
income_cte AS (
    SELECT `Income Group`, COUNT(*) AS income_cnt 
    FROM wdi_country 
    # WHERE `Income Group` IS NOT NULL
    GROUP BY `Income Group`
),
total_cte AS (
    SELECT COUNT(*) AS total_cnt 
    FROM wdi_country
),
pair_cte AS (
    SELECT
        region,
        `Income Group`,
        COUNT(*) AS pair_cnt
    FROM
        wdi_country
    WHERE region IS NOT NULL 
    # AND `Income Group` IS NOT NULL
    GROUP BY
        region,
        `Income Group`
),
merge_cte AS (
    SELECT
        a.region,
        a.`Income Group`,
        pair_cnt,
        region_cnt,
        income_cnt,
        total_cnt,
        100.0 * pair_cnt / total_cnt AS pct
    FROM
        pair_cte a
    LEFT JOIN region_cte b ON (a.region = b.region)
    LEFT JOIN income_cte c ON (a.`Income Group` = c.`Income Group`),
    total_cte d
)

SELECT
    region,
    ROUND(SUM(CASE WHEN `Income Group` = 'Low income' THEN pct ELSE 0 END),1) AS 'Low Income',
    ROUND(SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN pct ELSE 0 END),1) AS 'Low Middle',
    ROUND(SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN pct ELSE 0 END),1) AS 'Upper Middle',
    ROUND(SUM(CASE WHEN `Income Group` = 'High income' THEN pct ELSE 0 END),1) AS 'High Income',
    ROUND(SUM(pct),1) AS "Row total"
FROM
    merge_cte
GROUP BY
    region
ORDER BY
    region

""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
WITH income_cte AS (
    SELECT 
        `Income Group`, 
        COUNT(*) AS income_cnt
    FROM 
        wdi_country
    WHERE `Income Group` IS NOT NULL
    GROUP BY 
        `Income Group`
),
total_cte AS (
    SELECT 217 AS total_cnt
),
merge_cte AS (
    SELECT 
        a.`Income Group`, 
        income_cnt, 
        total_cnt,
        100.0 * income_cnt / total_cnt AS pct_of_total
    FROM 
        income_cte a, total_cte d
)

SELECT 
    `Income Group`,
    income_cnt,
    total_cnt,
    ROUND(pct_of_total, 1) AS "Pct of Total"
FROM 
    merge_cte
ORDER BY 
    `Income Group`;

""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

I feel a lot more confident in joins, but I could definitely grow a bit more in terms of writing subqueries, and overall just solving larger, more complex problems. The length of this assignment definitely helped me practice some of the same skills in different ways, which was very helpful.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

I broke it down by thinking about the end result, then back peddling to figure out how to produce that data. In particular, I thought about the joins that needed to occur, and then where to go from there. This approach helped a lot, and I plan to continue this approach when tackling other complex problems.

3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

I realized how hard it can be to visualize the finished product and then actually plan out all of the working steps to get there. I realized that it really is so complex and involves so many working parts to create the finished data analysis and transformations.


# README

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

